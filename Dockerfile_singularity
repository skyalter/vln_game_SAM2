FROM nvcr.io/nvidia/isaac-sim:4.5.0 as system

ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y locales \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG=en_US.UTF-8

# install libraries and tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    sudo \
    dialog \
    apt-utils \
    git \
    mercurial \
    pkg-config \
    mesa-utils \
    libxau-dev \
    libxdmcp-dev \
    libxcb1-dev \
    libxext-dev \
    libx11-dev \ 
    git \
    tmux \
    wget \
    curl \
    cmake \
    vim \ 
    build-essential \
    unzip \
    autoconf \
    autogen \
    automake \
    libtool \
    mlocate \
    zlib1g-dev \
    libopenblas-dev \
    libflann-dev \
    libboost-all-dev \
    libsuitesparse-dev \
    libtbb-dev \
    libusb-1.0-0-dev \
    libgtest-dev \
    pkg-config \
    cmake-curses-gui \
    gdb \
    clang \
    emacs \
    libpcap-dev \
    gnupg2 \
    x11-xserver-utils \
    lsb-release \
    tilix \
    zsh \
    python3-dev \
    python3-pip \
    python3-tk \
    python3-matplotlib \
    valgrind \
    kcachegrind

# --- Install ROS2
RUN sudo apt-get install software-properties-common -y \
    && sudo add-apt-repository universe -y \
    && sudo apt-get update && sudo apt-get install curl -y \
    && sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null

RUN sudo apt-get update --fix-missing \
    && sudo apt-get remove libbrotli1 -y \
    && sudo apt-get install -y ros-humble-desktop

## Update cmake
RUN sudo apt-get update \
    && sudo apt-get install -y --no-install-recommends software-properties-common \
    && wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2_amd64.deb \
    && sudo dpkg -i libssl1.1_1.1.1f-1ubuntu2_amd64.deb \
    && wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add - \
    && sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main' \
    && sudo apt-get install -y --no-install-recommends cmake \
    && gcc --version

# install zsh
COPY scripts/zsh zsh
RUN sudo apt-get install -y --no-install-recommends git
RUN cd zsh && bash install_zsh.sh

# install gitstatus
RUN mkdir -p /workspace/.cache/gitstatus \
    && wget https://github.com/romkatv/gitstatus/releases/download/v1.5.4/gitstatusd-linux-x86_64.tar.gz -O - \
    | tar -zx -C /workspace/.cache/gitstatus/

# --- Install conda and environment
ENV CONDA_DIR /workspace/conda
RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh \
    && /bin/bash ~/miniconda.sh -b -p ${CONDA_DIR}
ENV PATH $CONDA_DIR/bin:$PATH
ENV PATH_BACKUP $PATH
RUN conda create -n webvnc python=3.10
ENV PATH $CONDA_DIR/envs/webvnc/bin:$PATH_BACKUP

# --- Install CUDA 12.1
RUN wget https://developer.download.nvidia.com/compute/cuda/12.1.0/local_installers/cuda_12.1.0_530.30.02_linux.run
RUN TERM=xterm sh cuda_12.1.0_530.30.02_linux.run --silent --toolkit \
    && rm cuda_12.1.0_530.30.02_linux.run
RUN echo /var/log/cuda-installer.log
ENV PATH=/usr/local/cuda-12.1/bin:${PATH_BACKUP}
ENV LD_LIBRARY_PATH=/usr/local/cuda-12.1/lib64:${LD_LIBRARY_PATH}

# WORKDIR /dependencies
# RUN pip uninstall -y urllib3 && pip install urllib3
# RUN conda create --name vln python=3.10
# ENV PATH $CONDA_DIR/envs/vln/bin:$PATH
# SHELL ["conda", "run", "-n", "vln", "/bin/bash", "-c"]

# # --- Install habitat-sim
# RUN git clone --branch v0.2.1 https://github.com/facebookresearch/habitat-sim.git
# RUN cd habitat-sim \
#     && pip install -r requirements.txt \
#     && python setup.py install --headless --with-cuda --bullet

# # --- Install habitat-lab
# RUN git clone --branch v0.2.1 https://github.com/facebookresearch/habitat-lab.git
# RUN cd habitat-lab \
#     && pip install -e .

# # --- Install common python dependencies
# RUN pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121
# RUN wget https://anaconda.org/pytorch3d/pytorch3d/0.7.8/download/linux-64/pytorch3d-0.7.8-py310_cu121_pyt222.tar.bz2 \
#     && conda install pytorch3d-0.7.8-py310_cu121_pyt222.tar.bz2 \
#     && rm pytorch3d-0.7.8-py310_cu121_pyt222.tar.bz2
# RUN curl -fsSL https://ollama.com/install.sh | sh
# RUN pip3 install scikit-image pslpython open3d omegaconf git+https://github.com/openai/CLIP.git nltk einops ftfy scikit-fmm ollama openai matplotlib==3.9

# # --- Install Ground-SAM
# RUN git clone https://github.com/IDEA-Research/Grounded-Segment-Anything.git && \
#     cd Grounded-Segment-Anything && \
#     git submodule update --init --recursive
# WORKDIR /dependencies/Grounded-Segment-Anything
# RUN git clone https://github.com/mattmazzola/Tag2Text.git
# RUN wget https://dl.fbaipublicfiles.com/segment_anything/sam_vit_h_4b8939.pth
# RUN wget https://github.com/IDEA-Research/GroundingDINO/releases/download/v0.1.0-alpha/groundingdino_swint_ogc.pth
# # RUN wget https://huggingface.co/spaces/xinyu1205/Tag2Text/resolve/main/ram_swin_large_14m.pth
# # RUN wget https://huggingface.co/spaces/xinyu1205/Tag2Text/resolve/main/tag2text_swin_14m.pth
# ENV CUDA_HOME /usr/local/cuda-12.1/
# ENV AM_I_DOCKER True
# ENV TORCH_CUDA_ARCH_LIST="6.0;7.0;7.5;8.0;8.6"
# ENV BUILD_WITH_CUDA 1
# RUN python -m pip install --no-cache-dir -e segment_anything
# RUN python -m pip install --upgrade pip
# RUN python -m pip install --upgrade setuptools wheel twine check-wheel-contents
# RUN python -m pip install --no-cache-dir wheel
# RUN python -m pip install --no-cache-dir --no-build-isolation -e GroundingDINO

# # --- Fix library issues
# RUN mkdir -p /usr/lib/dri/ && \
#     ln -s /usr/lib/x86_64-linux-gnu/dri/swrast_dri.so /usr/lib/dri/ && \
#     ln -s /usr/lib/x86_64-linux-gnu/dri/radeonsi_dri.so /usr/lib/dri/ && \
#     mv /workspace/conda/envs/vln/lib/libstdc++.so.6 /workspace/conda/envs/vln/lib/libstdc++.so.6.old && \
#     ln -s /usr/lib/x86_64-linux-gnu/libstdc++.so.6 /workspace/conda/envs/vln/lib/libstdc++.so.6

# # Apply patches to habitat
# COPY habitat/dataset.py /dependencies/habitat-lab/habitat/core/
# COPY habitat/nav.py /dependencies/habitat-lab/habitat/tasks/nav/

# # --- Install VLN-Game dependencies
# WORKDIR /dependencies
# RUN git clone https://github.com/ybgdgh/VLN-Game
# RUN cd VLN-Game && pip install -r requirements.txt
# ENV GSA_PATH=/dependencies/Grounded-Segment-Anything
# RUN pip install git+https://github.com/xinyu1205/recognize-anything.git
# RUN pip uninstall -y open3d
# RUN pip install numpy==1.26.4 open3d==0.19.0
# RUN conda install -y pytorch::faiss-gpu
# RUN pip install fairscale supervision==0.25.0 transformers==4.49.0 scipy==1.11.2 opencv-python==4.9.0.80 watchdog ipython

# # --- Download llama3.2-vision with ollama
# RUN ollama serve & sleep 5 ; ollama pull llama3.2-vision ; \
#     echo "kill 'ollama serve' process" ; \
#     ps -ef | grep 'ollama serve' | grep -v grep | awk '{print $2}' | xargs -r kill -9

# # --- Install isaac lab
# # RUN pip install isaacsim-extscache-kit==4.1.0 --extra-index-url https://pypi.nvidia.com
# # RUN pip install isaacsim-rl==4.1.0 isaacsim-replicator==4.1.0 isaacsim-extscache-physics==4.1.0 isaacsim-extscache-kit-sdk==4.1.0 isaacsim-extscache-kit==4.1.0 isaacsim-app==4.1.0 --extra-index-url https://pypi.nvidia.com
# # RUN git clone --branch v1.1.0 https://github.com/isaac-sim/IsaacLab.git
# # RUN sed -i 's/rsl-rl@/rsl-rl-lib@/g' IsaacLab/source/extensions/omni.isaac.lab_tasks/config/extension.toml
# # RUN sed -i 's/rsl-rl@/rsl-rl-lib@/g' IsaacLab/source/extensions/omni.isaac.lab_tasks/setup.py
# # RUN cd IsaacLab \
# #     && pip install isaacsim-rl \
# #     && ./isaaclab.sh --install

# # sudo apt-get update && sudo apt-get install -y libgl1-mesa-dri libgl1-mesa-glx mesa-utils